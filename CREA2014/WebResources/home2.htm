<!DOCTYPE html>

<html lang="ja" xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <script type="text/javascript" src="jquery-2.1.1.js"></script>
    <script type="text/javascript" src="jquery-ui-1.10.4.custom.js"></script>
    <script type="text/javascript" src="knockout-3.2.0.js"></script>
    <script type="text/javascript">
        function AccountHolder() {
            var self = this;

            self.name = ko.observable("");
            self.accounts = ko.observableArray();
        }

        function TransactionHistory() {
            var self = this;

            self.validity = ko.observable("");
            self.state = ko.observable("");
            self.blockIndex = ko.observable("");
            self.confirmation = ko.observable("");
            self.type = ko.observable("");
            self.datetime = ko.observable("");
            self.id = ko.observable("");
            self.fromAddress = ko.observable("");
            self.toAddress = ko.observable("");
            self.amount = ko.observable("");
        }

        function AppViewModel() {
            var self = this;

            self.partBalance = ko.observable("");
            self.partAccount = ko.observable("");
            self.partLog = ko.observable("");
            self.partChat = ko.observable("");
            self.partTransaction = ko.observable("");

            self.activatedPart = ko.observable(0);

            self.balanceName = ko.observable("");
            self.balanceValue = ko.observable(0);
            self.balanceUnit = ko.observable("");
            self.balance = ko.computed(function () {
                return self.balanceValue() + self.balanceUnit();
            });

            self.usableName = ko.observable("");
            self.usableValue = ko.observable(0);
            self.usableUnit = ko.observable("");
            self.usableBalance = ko.computed(function () {
                return self.usableValue() + self.usableUnit();
            });

            self.unusableName = ko.observable("");
            self.unusableValue = ko.observable(0);
            self.unusableUnit = ko.observable("");
            self.unusableBalance = ko.computed(function () {
                return self.unusableValue() + self.unusableUnit();
            });

            self.buttonNewAccountHolderName = ko.observable("");
            self.buttonNewAccountHolderKeyName = ko.observable("");
            self.buttonNewAccountHolderKey = ko.observable();
            self.buttonNewAccountHolderCaption = ko.computed(function () {
                return $("<div>").text(self.buttonNewAccountHolderName()).html() + "(<U>" + $("<div>").text(self.buttonNewAccountHolderKeyName()).html() + "</U>)...";
            });
            self.buttonNewAccountHolderClicked = function () {
                ws.send("new_account_holder");
            }

            self.buttonNewAccountName = ko.observable("");
            self.buttonNewAccountKeyName = ko.observable("");
            self.buttonNewAccountKey = ko.observable();
            self.buttonNewAccountCaption = ko.computed(function () {
                return $("<div>").text(self.buttonNewAccountName()).html() + "(<U>" + $("<div>").text(self.buttonNewAccountKeyName()).html() + "</U>)...";
            });
            self.buttonNewAccountClicked = function () {
                ws.send("new_account");
            }

            self.buttonNewTransactionName = ko.observable("");
            self.buttonNewTransactionKeyName = ko.observable("");
            self.buttonNewTransactionKey = ko.observable();
            self.buttonNewTransactionCaption = ko.computed(function () {
                return $("<div>").text(self.buttonNewTransactionName()).html() + "(<U>" + $("<div>").text(self.buttonNewTransactionKeyName()).html() + "</U>)...";
            });
            self.buttonNewTransactionClicked = function () {
                ws.send("new_transaction");
            }

            self.accountHoldersColumnName = ko.observable("");
            self.accountHoldersColumnDescription = ko.observable("");
            self.accountHoldersColumnAddress = ko.observable("");
            self.anonymousAccountHolder = new AccountHolder();
            self.pseudonymousAccountHolders = ko.observableArray();

            self.txsColumnValidity = ko.observable("");
            self.txsColumnState = ko.observable("");
            self.txsColumnConfirmation = ko.observable("");
            self.txsColumnType = ko.observable("");
            self.txsColumnDatetime = ko.observable("");
            self.txsColumnId = ko.observable("");
            self.txsColumnFromAddress = ko.observable("");
            self.txsColumnToAddress = ko.observable("");
            self.txsColumnAmount = ko.observable("");
            self.invalidTxsName = ko.observable("");
            self.unconfirmedTxsName = ko.observable("");
            self.confirmedTxsName = ko.observable("");
            self.invalidTxs = ko.observableArray();
            self.unconfirmedTxs = ko.observableArray();
            self.confirmedTxs = ko.observableArray();
            self.currentBlockIndex = ko.observable("");

            self.logs = ko.observableArray();

            self.chatPah = ko.observable();
            self.chatMessage = ko.observable("");
            self.chatPahDescription = ko.observable("");
            self.chatSend = ko.observable("");
            self.chats = ko.observableArray();
            self.SendChat = function () {
                var obj = {
                    pah: vm.chatPah().name(),
                    message: vm.chatMessage()
                };

                ws.send("new_chat " + JSON.stringify(obj));
            }

            self.activatePartBalance = function () {
                self.activatedPart(0);
            }

            self.activatePartAccount = function () {
                self.activatedPart(1);
            }

            self.activatePartLog = function () {
                self.activatedPart(2);
            }

            self.activatePartChat = function () {
                self.activatedPart(3);
            }

            self.activatePartTransaction = function () {
                self.activatedPart(4);
            }
        }

        var vm = new AppViewModel();

        var host = "%%host%%";
        var port = "%%port%%";

        var ws = null;

        $(function () {
            ko.applyBindings(vm);

            om = function (e) {
                if (e.data.indexOf("wss", 0) == 0) {
                    port = e.data.substring(4);

                    ws.close();
                    ws = new WebSocket("ws://" + host + ":" + port + "/");
                    ws.onmessage = om;
                }
                else if (e.data.indexOf("wallpaper", 0) == 0)
                    $(document.body).css("background-image", "url('" + e.data.substring(10) + "')");
                else if (e.data.indexOf("keydown", 0) == 0) {
                    var code = Number(e.data.substring(8));
                    if (code == NaN)
                        throw "keydown_nan";

                    var evt = $.Event("keydown");
                    evt.keyCode = code;
                    $(document).trigger(evt);
                }
                else if (e.data.indexOf("balanceUpdated", 0) == 0) {
                    var obj = JSON.parse(e.data.substring(15));

                    vm.balanceValue(obj.value);
                    vm.balanceUnit(obj.unit);

                    vm.usableValue(obj.usable.value);
                    vm.usableUnit(obj.usable.unit);

                    vm.unusableValue(obj.unusable.value);
                    vm.unusableUnit(obj.unusable.unit);
                }
                else if (e.data.indexOf("aahUpdated", 0) == 0) {
                    var obj = JSON.parse(e.data.substring(11));

                    vm.anonymousAccountHolder.accounts.removeAll();
                    var temp = vm.anonymousAccountHolder.accounts();
                    for (var i = 0; i < obj.accounts.length; i++) {
                        temp.push(obj.accounts[i]);
                    }
                    vm.anonymousAccountHolder.accounts.valueHasMutated();

                    AccUI();
                }
                else if (e.data.indexOf("pahsUpdated", 0) == 0) {
                    var array = JSON.parse(e.data.substring(12));

                    vm.pseudonymousAccountHolders.removeAll();
                    var temp = vm.pseudonymousAccountHolders();
                    for (var i = 0; i < array.length; i++) {
                        var pah = new AccountHolder();
                        pah.name(array[i].name);
                        var temp2 = pah.accounts();
                        for (var j = 0; j < array[i].accounts.length; j++) {
                            temp2.push(array[i].accounts[j]);
                        }
                        pah.accounts.valueHasMutated();
                        temp.push(pah);
                    }
                    vm.pseudonymousAccountHolders.valueHasMutated();

                    AccUI();
                }
                else if (e.data.indexOf("logAdded", 0) == 0) {
                    vm.logs.splice(0, 0, JSON.parse(e.data.substring(9)));
                }
                else if (e.data.indexOf("chatAdded", 0) == 0) {
                    vm.chats.splice(0, 0, JSON.parse(e.data.substring(10)));
                }
                else if (e.data.indexOf("blockchainUpdated", 0) == 0) {
                    var obj = JSON.parse(e.data.substring(18));

                    vm.currentBlockIndex(obj.currentBlockIndex);

                    for (var i = 0; i < vm.invalidTxs().length; i++) {
                        vm.invalidTxs[i].confirmation(obj.currentBlockIndex - vm.invalidTxs[i].blockIndex());
                    }
                    for (var i = 0; i < vm.unconfirmedTxs().length; i++) {
                        vm.unconfirmedTxs[i].confirmation(obj.currentBlockIndex - vm.unconfirmedTxs[i].blockIndex());
                    }
                    for (var i = 0; i < vm.confirmedTxs().length; i++) {
                        vm.confirmedTxs()[i].confirmation(obj.currentBlockIndex - vm.confirmedTxs()[i].blockIndex());
                    }
                }
                else if (e.data.indexOf("invalidTxAdded", 0) == 0) {
                    vm.invalidTxs.splice(0, 0, CreateTransactionHistory(JSON.parse(e.data.substring(15)), vm.currentBlockIndex()));
                }
                else if (e.data.indexOf("invalidTxRemoved", 0) == 0) {
                    var obj = JSON.parse(e.data.substring(17));

                    var index = null;
                    for (var i = 0; i < vm.invalidTxs.length; i++) {
                        if (vm.invalidTxs[i].id == obj.id) {
                            index = i;

                            break;
                        }
                    }

                    if (index != null) {
                        vm.invalidTxs.splice(index, 1);
                    }
                }
                else if (e.data.indexOf("unconfirmedTxAdded", 0) == 0) {
                    vm.unconfirmedTxs.splice(0, 0, CreateTransactionHistory(JSON.parse(e.data.substring(19)), vm.currentBlockIndex()));
                }
                else if (e.data.indexOf("unconformedTxRemoved", 0) == 0) {
                    var obj = JSON.parse(e.data.substring(21));

                    var index = null;
                    for (var i = 0; i < vm.unconfirmedTxs.length; i++) {
                        if (vm.unconfirmedTxs[i].id == obj.id) {
                            index = i;

                            break;
                        }
                    }

                    if (index != null) {
                        vm.unconfirmedTxs.splice(index, 1);
                    }
                }
                else if (e.data.indexOf("confirmedTxAdded", 0) == 0) {
                    vm.confirmedTxs.splice(0, 0, CreateTransactionHistory(JSON.parse(e.data.substring(17)), vm.currentBlockIndex()));
                }
                else if (e.data.indexOf("confirmedTxRemoved", 0) == 0) {
                    var obj = JSON.parse(e.data.substring(19));

                    var index = null;
                    for (var i = 0; i < vm.confirmedTxs.length; i++) {
                        if (vm.confirmedTxs[i].id == obj.id) {
                            index = i;

                            break;
                        }
                    }

                    if (index != null) {
                        vm.confirmedTxs.splice(index, 1);
                    }
                }
                else if (e.data.indexOf("initial_data", 0) == 0) {
                    var obj = JSON.parse(e.data.substring(13));

                    document.title = obj.title;

                    vm.partBalance(obj.partBalance.name);
                    vm.partAccount(obj.partAccount.name);
                    vm.partLog(obj.partLog.name);
                    vm.partChat(obj.partChat.name);
                    vm.partTransaction(obj.partTransaction.name);

                    vm.balanceName(obj.partBalance.detail.name);
                    vm.balanceValue(obj.partBalance.detail.value);
                    vm.balanceUnit(obj.partBalance.detail.unit);

                    vm.usableName(obj.partBalance.detail.usable.name);
                    vm.usableValue(obj.partBalance.detail.usable.value);
                    vm.usableUnit(obj.partBalance.detail.usable.unit);

                    vm.unusableName(obj.partBalance.detail.unusable.name);
                    vm.unusableValue(obj.partBalance.detail.unusable.value);
                    vm.unusableUnit(obj.partBalance.detail.unusable.unit);

                    vm.buttonNewAccountHolderName(obj.partAccount.accountButtons.buttonNewAccountHolder.name);
                    vm.buttonNewAccountHolderKeyName(obj.partAccount.accountButtons.buttonNewAccountHolder.keyName);
                    vm.buttonNewAccountHolderKey(obj.partAccount.accountButtons.buttonNewAccountHolder.key);

                    vm.buttonNewAccountName(obj.partAccount.accountButtons.buttonNewAccount.name);
                    vm.buttonNewAccountKey(obj.partAccount.accountButtons.buttonNewAccount.key);
                    vm.buttonNewAccountKeyName(obj.partAccount.accountButtons.buttonNewAccount.keyName);

                    vm.buttonNewTransactionName(obj.partTransaction.buttons.buttonNewTransaction.name);
                    vm.buttonNewTransactionKey(obj.partTransaction.buttons.buttonNewTransaction.key);
                    vm.buttonNewTransactionKeyName(obj.partTransaction.buttons.buttonNewTransaction.keyName);

                    vm.accountHoldersColumnName(obj.partAccount.accountHolderColumns.name);
                    vm.accountHoldersColumnDescription(obj.partAccount.accountHolderColumns.description);
                    vm.accountHoldersColumnAddress(obj.partAccount.accountHolderColumns.address);

                    vm.txsColumnValidity(obj.partTransaction.txsColumns.validity);
                    vm.txsColumnState(obj.partTransaction.txsColumns.state);
                    vm.txsColumnConfirmation(obj.partTransaction.txsColumns.confirmation);
                    vm.txsColumnType(obj.partTransaction.txsColumns.type);
                    vm.txsColumnDatetime(obj.partTransaction.txsColumns.datetime);
                    vm.txsColumnId(obj.partTransaction.txsColumns.id);
                    vm.txsColumnFromAddress(obj.partTransaction.txsColumns.fromAddress);
                    vm.txsColumnToAddress(obj.partTransaction.txsColumns.toAddress);
                    vm.txsColumnAmount(obj.partTransaction.txsColumns.amount);

                    vm.invalidTxsName(obj.partTransaction.invalidTxsName);
                    vm.unconfirmedTxsName(obj.partTransaction.unconfirmedTxsName);
                    vm.confirmedTxsName(obj.partTransaction.confirmedTxsName);

                    vm.currentBlockIndex(obj.partTransaction.currentBlockIndex);

                    var temp = vm.invalidTxs();
                    for (var i = 0; i < obj.partTransaction.invalidTxs.length; i++) {
                        temp.push(CreateTransactionHistory(obj.partTransaction.invalidTxs[i], obj.partTransaction.currentBlockIndex));
                    }
                    vm.invalidTxs.valueHasMutated();

                    var temp = vm.unconfirmedTxs();
                    for (var i = 0; i < obj.partTransaction.unconfirmedTxs.length; i++) {
                        temp.push(CreateTransactionHistory(obj.partTransaction.unconfirmedTxs[i], obj.partTransaction.currentBlockIndex));
                    }
                    vm.unconfirmedTxs.valueHasMutated();

                    var temp = vm.confirmedTxs();
                    for (var i = 0; i < obj.partTransaction.confirmedTxs.length; i++) {
                        temp.push(CreateTransactionHistory(obj.partTransaction.confirmedTxs[i], obj.partTransaction.currentBlockIndex));
                    }
                    vm.confirmedTxs.valueHasMutated();

                    vm.anonymousAccountHolder.name(obj.partAccount.anonymousAccountHolder.name);
                    var temp = vm.anonymousAccountHolder.accounts();
                    for (var i = 0; i < obj.partAccount.anonymousAccountHolder.accounts.length; i++) {
                        temp.push(obj.partAccount.anonymousAccountHolder.accounts[i]);
                    }
                    vm.anonymousAccountHolder.accounts.valueHasMutated();

                    var temp = vm.pseudonymousAccountHolders();
                    for (var i = 0; i < obj.partAccount.pseudonymousAccountHolders.length; i++) {
                        var pah = new AccountHolder();
                        pah.name(obj.partAccount.pseudonymousAccountHolders[i].name);
                        var temp2 = pah.accounts();
                        for (var j = 0; j < obj.partAccount.pseudonymousAccountHolders[i].accounts.length; j++) {
                            temp2.push(obj.partAccount.pseudonymousAccountHolders[i].accounts[j]);
                        }
                        pah.accounts.valueHasMutated();
                        temp.push(pah);
                    }
                    vm.pseudonymousAccountHolders.valueHasMutated();

                    for (var i = 0; i < obj.partLog.logs.length; i++) {
                        vm.logs.splice(0, 0, obj.partLog.logs[i]);
                    }

                    vm.chatPahDescription(obj.partChat.pahSelectDescription);
                    vm.chatSend(obj.partChat.sendButtonName);

                    for (var i = 0; i < obj.partChat.chats.length; i++) {
                        vm.chats.splice(0, 0, obj.partChat.chats[i]);
                    }

                    AccUI();
                    ChatUI();

                    document.body.style.display = "block";
                }
            };

            ws = new WebSocket("ws://" + host + ":" + port + "/");
            ws.onopen = function () {
            };
            ws.onerror = function (error) {
            };
            ws.onmessage = om;

            $(document).keydown(function (e) {
                if (vm.activatedPart() == 1) {
                    if (e.keyCode == vm.buttonNewAccountHolderKey()) {
                        ws.send("new_account_holder");
                    }
                    else if (e.keyCode == vm.buttonNewAccountKey()) {
                        ws.send("new_account");
                    }
                }
                else if (vm.activatedPart() == 4) {
                    if (e.keyCode == vm.buttonNewTransactionKey()) {
                        ws.send("new_transaction");
                    }
                }
            });

            function CreateTransactionHistory(original, currentBlockIndex) {
                var th = new TransactionHistory();

                th.validity(original.validity);
                th.state(original.state);
                th.blockIndex(original.blockIndex);
                th.confirmation(currentBlockIndex - original.blockIndex);
                th.type(original.type);
                th.datetime(original.datetime);
                th.id(original.id);
                th.fromAddress(original.fromAddress);
                th.toAddress(original.toAddress);
                th.amount(original.amount);

                return th;
            }

            function AccUI() {
                var accounts = $(".acc");

                accounts.each(function () {
                    var e = $(this).get(0);

                    if (!$.data(e, "processed")) {
                        $.data(e, "processed", true);

                        $(this).hover(function () {
                            if (!$(this).hasClass("acc_selected"))
                                $(this).switchClass("acc", "acc_hover", 200);
                        }, function () {
                            if (!$(this).hasClass("acc_selected"))
                                $(this).switchClass("acc_hover", "acc", 200);
                        });

                        $(this).click(function () {
                            $(".acc_selected").switchClass("acc_selected", "acc", 200);
                            $(this).switchClass("acc_hover", "acc_selected", 200);
                        });
                    }
                });
            }

            function ChatUI() {
                $("#chatMessageInput").keydown(function (e) {
                    if (e.keyCode == 13) {
                        vm.SendChat();
                    }
                });
            }
        });

        window.onunload = function () {
            if (ws != null)
                ws.close();
        };
    </script>

    <style type="text/css">
        * {
            margin: 0px;
            padding: 0px;
            font-family: 'MS Gothic';
        }

        html {
            height: 100%;
        }

        body {
            display: none;
            height: 100%;
            background-image: url("back.png");
            background-size: cover;
            background-attachment: fixed;
            background-position: top left;
        }

        #main {
            width: 100%;
            height: 100%;
        }

        #content {
            word-wrap: break-word;
            height: 100%;
            overflow: auto;
        }
    </style>
</head>
<body>
    <div id="main">
        <div id="content">
            <div id="tab1">
                <style type="text/css">
                    #tab1 {
                        height: 100%;
                    }

                    #tab1items {
                        float: left;
                        width: 20%;
                        height: 100%;
                        background-color: rgba(221,221,221,0.5);
                        overflow: hidden;
                    }

                    #tab1contents {
                        float: left;
                        width: 80%;
                        height: 100%;
                        overflow: auto;
                    }

                    .tab1_tabitem {
                        font-size: 20px;
                        font-weight: bold;
                        color: #0073ea;
                        margin: 10px 1px 10px 10px;
                        padding: 4px;
                        border: solid gray;
                        border-width: 2px 0px 2px 2px;
                        border-radius: 5px 0px 0px 5px;
                        box-shadow: 3px 3px 3px rgba(0,0,0,0.4);
                        background-color: lightgray;
                    }

                    .tab1_tabitem_hover {
                        font-size: 20px;
                        font-weight: bold;
                        color: white;
                        margin: 10px 1px 10px 10px;
                        padding: 4px;
                        border: solid gray;
                        border-width: 2px 0px 2px 2px;
                        border-radius: 5px 0px 0px 5px;
                        box-shadow: 3px 3px 3px rgba(0,0,0,0.4);
                        background-color: #0073ea;
                    }

                    .tab1_tabitem_selected {
                        font-size: 20px;
                        font-weight: bold;
                        color: #ff0084;
                        margin: 10px 0px 10px 10px;
                        padding: 4px;
                        border: solid gray;
                        border-width: 2px 0px 2px 2px;
                        border-radius: 5px 0px 0px 5px;
                        box-shadow: 4px 4px 4px rgba(0,0,0,0.2);
                        background-color: white;
                    }

                    .tab1_tabcontent {
                    }

                    .tab1_tabcontent_selected {
                        display: block;
                    }

                    #tab1_tabcontent3 {
                        background-color: rgba(0,0,0,0.7);
                        height: 100%;
                    }

                    #tab1_tabcontent4 {
                        background-color: rgba(0,0,0,0.7);
                        color: white;
                        height: 100%;
                    }

                    #logs_container {
                        height: 100%;
                        overflow-y: scroll;
                    }

                    #chats_container {
                        height: 100%;
                        overflow-y: scroll;
                    }

                    #zandaka_label {
                        font-size: 32px;
                        font-weight: bold;
                        margin: 30px 0px 0px 30px;
                    }

                    #zandaka {
                        font-size: 16px;
                        font-weight: bold;
                        margin: 15px 0px 0px 45px;
                    }

                    #zandaka_kanou_label {
                        font-size: 12px;
                        font-weight: bold;
                        margin: 15px 0px 0px 45px;
                    }

                    #zandaka_kanou {
                        font-size: 12px;
                        font-weight: bold;
                        margin: 15px 0px 0px 45px;
                    }

                    #zandaka_huka_label {
                        font-size: 12px;
                        font-weight: bold;
                        margin: 15px 0px 0px 45px;
                    }

                    #zandaka_huka {
                        font-size: 12px;
                        font-weight: bold;
                        margin: 15px 0px 0px 45px;
                    }

                    .button {
                        float: left;
                    }

                    .button1_content {
                        font-size: 12px;
                        color: #0073ea;
                        margin: 1px;
                        padding: 4px;
                        border: solid gray;
                        border-width: 1px;
                        border-radius: 3px;
                        background-color: lightgray;
                    }

                    .button1_content_hover {
                        font-size: 12px;
                        color: white;
                        margin: 1px;
                        padding: 4px;
                        border: solid gray;
                        border-width: 1px;
                        border-radius: 3px;
                        background-color: #0073ea;
                    }

                    .button1_content_mouse_down {
                        font-size: 12px;
                        color: #ff0084;
                        margin: 1px;
                        padding: 4px;
                        border: solid gray;
                        border-width: 1px;
                        border-radius: 3px;
                        background-color: white;
                    }

                    .acc_hol {
                        clear: left;
                        margin: 15px 5px 0px 5px;
                        font-size: 16px;
                        border: solid;
                        border-color: rgba(128,128,128,0.4);
                        border-width: 2px;
                        background-color: rgba(255,255,255,0.4);
                    }

                    .acc_hol_title {
                        padding: 5px;
                    }

                    table {
                        display: inline-table;
                        width: 100%;
                        border-collapse: collapse;
                    }

                    .acc_header td, .acc_header th {
                        font-size: 12px;
                        white-space: pre;
                        padding: 3px;
                        color: #2e6e9e;
                        border: 1px solid #c5dbec;
                        background-color: rgba(223,239,252,0.5);
                    }

                    .acc td, .acc th {
                        font-size: 12px;
                        padding: 2px;
                        border: 1px solid #a6c9e2;
                    }

                    .acc_hover td, .acc_hover th {
                        font-size: 12px;
                        padding: 2px;
                        border: 1px solid #79b7e7;
                        background-color: rgba(208,229,245,0.5);
                    }

                    .acc_selected td, .acc_selected th {
                        font-size: 12px;
                        padding: 2px;
                        border: 1px solid #fad42e;
                        background-color: rgba(251,236,136,0.5);
                    }

                    .acc_name {
                        width: 25%;
                    }

                    .acc_desc {
                        width: 25%;
                    }

                    .acc_addr {
                        width: 50%;
                    }

                    .txs {
                        clear: left;
                        margin: 15px 5px 0px 5px;
                        font-size: 16px;
                        border: solid;
                        border-color: rgba(128,128,128,0.4);
                        border-width: 2px;
                        background-color: rgba(255,255,255,0.4);
                    }

                    .txs_title {
                        padding: 5px;
                    }

                    .txs_header td, .txs_header th {
                        font-size: 12px;
                        white-space: pre;
                        padding: 3px;
                        color: #2e6e9e;
                        border: 1px solid #c5dbec;
                        background-color: rgba(223,239,252,0.5);
                    }

                    .tx td, .tx th {
                        font-size: 12px;
                        padding: 2px;
                        border: 1px solid #a6c9e2;
                    }

                    .tx_hover td, .tx_hover th {
                        font-size: 12px;
                        padding: 2px;
                        border: 1px solid #79b7e7;
                        background-color: rgba(208,229,245,0.5);
                    }

                    .tx_selected td, .tx_selected th {
                        font-size: 12px;
                        padding: 2px;
                        border: 1px solid #fad42e;
                        background-color: rgba(251,236,136,0.5);
                    }

                    .tx_validity {
                        width: 5%;
                    }

                    .tx_state {
                        width: 5%;
                    }

                    .tx_confirmation {
                        width: 5%;
                    }

                    .tx_type {
                        width: 5%;
                    }

                    .tx_datetime {
                        width: 10%;
                    }

                    .tx_id {
                        width: 20%;
                        word-break: break-all;
                    }

                    .tx_from_address {
                        width: 20%;
                        word-break: break-all;
                    }

                    .tx_to_address {
                        width: 20%;
                        word-break: break-all;
                    }

                    .tx_amount {
                        width: 10%;
                    }

                    .log_item_notification {
                        color: yellowgreen;
                    }

                    .log_item_error {
                        color: red;
                    }

                    .log_item_warning {
                        color: orange;
                    }
                </style>
                <script type="text/javascript">
                    $(function () {
                        var items = $(".tab1_tabitem");
                        items.hover(function () {
                            $(this).switchClass("tab1_tabitem", "tab1_tabitem_hover", 200);
                        }, function () {
                            $(this).switchClass("tab1_tabitem_hover", "tab1_tabitem", 200);
                        });

                        var buttons = $(".button1_content");
                        buttons.hover(function () {
                            $(this).switchClass("button1_content", "button1_content_hover", 200);
                        }, function () {
                            $(this).switchClass("button1_content_hover", "button1_content", 200);
                        });
                        buttons.mousedown(function () {
                            $(this).switchClass("button1_content_hover", "button1_content_mouse_down", 50);
                        });
                        buttons.mouseup(function () {
                            $(this).switchClass("button1_content_mouse_down", "button1_content_hover", 50);
                        });
                    });
                </script>
                <div id="tab1items">
                    <div id="tab1_tabitem1" class="tab1_tabitem" data-bind="text: partBalance, click: activatePartBalance, css: { tab1_tabitem_selected: activatedPart() == 0 }"></div>
                    <div id="tab1_tabitem2" class="tab1_tabitem" data-bind="text: partAccount, click: activatePartAccount, css: { tab1_tabitem_selected: activatedPart() == 1 }"></div>
                    <div id="tab1_tabitem5" class="tab1_tabitem" data-bind="text: partTransaction, click: activatePartTransaction, css: { tab1_tabitem_selected: activatedPart() == 4 }"></div>
                    <div id="tab1_tabitem3" class="tab1_tabitem" data-bind="text: partLog, click: activatePartLog, css: { tab1_tabitem_selected: activatedPart() == 2 }"></div>
                    <div id="tab1_tabitem4" class="tab1_tabitem" data-bind="text: partChat, click: activatePartChat, css: { tab1_tabitem_selected: activatedPart() == 3 }"></div>
                </div>
                <div id="tab1contents">
                    <div id="tab1_tabcontent1" class="tab1_tabcontent" data-bind="visible: activatedPart() == 0">
                        <div id="zandaka_label" data-bind="text: balanceName"></div>
                        <div id="zandaka" data-bind="text: balance"></div>
                        <div id="zandaka_kanou_label" data-bind="text: usableName"></div>
                        <div id="zandaka_kanou" data-bind="text: usableBalance"></div>
                        <div id="zandaka_huka_label" data-bind="text: unusableName"></div>
                        <div id="zandaka_huka" data-bind="text: unusableBalance"></div>
                    </div>
                    <div id="tab1_tabcontent2" class="tab1_tabcontent" data-bind="visible: activatedPart() == 1">
                        <div id="button1" class="button">
                            <div id="button1_content" class="button1_content" data-bind="html: buttonNewAccountHolderCaption, click: buttonNewAccountHolderClicked"></div>
                        </div>
                        <div id="button2" class="button">
                            <div id="button2_content" class="button1_content" data-bind="html: buttonNewAccountCaption, click: buttonNewAccountClicked"></div>
                        </div>
                        <div id="acc_hols_container">
                            <div class="acc_hol">
                                <div class="acc_hol_title" data-bind="text: anonymousAccountHolder.name"></div>
                                <table>
                                    <thead>
                                        <tr class="acc_header">
                                            <th data-bind="text: accountHoldersColumnName"></th>
                                            <th data-bind="text: accountHoldersColumnDescription"></th>
                                            <th data-bind="text: accountHoldersColumnAddress"></th>
                                        </tr>
                                    </thead>
                                    <tbody data-bind="foreach: anonymousAccountHolder.accounts">
                                        <tr class="acc">
                                            <td class="acc_name" data-bind="text: name"></td>
                                            <td class="acc_desc" data-bind="text: description"></td>
                                            <td class="acc_addr" data-bind="text: address"></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div id="psu_acc_hols" data-bind="foreach: pseudonymousAccountHolders">
                                <div class="acc_hol">
                                    <div class="acc_hol_title" data-bind="text: name"></div>
                                    <div>
                                        <table>
                                            <thead>
                                                <tr class="acc_header">
                                                    <th data-bind="text: $parent.accountHoldersColumnName"></th>
                                                    <th data-bind="text: $parent.accountHoldersColumnDescription"></th>
                                                    <th data-bind="text: $parent.accountHoldersColumnAddress"></th>
                                                </tr>
                                            </thead>
                                            <tbody data-bind="foreach: accounts">
                                                <tr class="acc">
                                                    <td class="acc_name" data-bind="text: name"></td>
                                                    <td class="acc_desc" data-bind="text: description"></td>
                                                    <td class="acc_addr" data-bind="text: address"></td>
                                                </tr>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="tab1_tabcontent5" class="tab1_tabcontent" data-bind="visible: activatedPart() == 4">
                        <div id="button3" class="button">
                            <div id="button3_content" class="button1_content" data-bind="html: buttonNewTransactionCaption, click: buttonNewTransactionClicked"></div>
                        </div>
                        <div id="invalid_txs_container">
                            <div class="txs">
                                <div class="txs_title" data-bind="text: invalidTxsName"></div>
                                <table>
                                    <thead>
                                        <tr class="txs_header">
                                            <th data-bind="text: txsColumnValidity"></th>
                                            <th data-bind="text: txsColumnState"></th>
                                            <th data-bind="text: txsColumnConfirmation"></th>
                                            <th data-bind="text: txsColumnType"></th>
                                            <th data-bind="text: txsColumnDatetime"></th>
                                            <th data-bind="text: txsColumnId"></th>
                                            <th data-bind="text: txsColumnFromAddress"></th>
                                            <th data-bind="text: txsColumnToAddress"></th>
                                            <th data-bind="text: txsColumnAmount"></th>
                                        </tr>
                                    </thead>
                                    <tbody data-bind="foreach: invalidTxs">
                                        <tr class="tx">
                                            <td class="tx_validity" data-bind="text: validity"></td>
                                            <td class="tx_state" data-bind="text: state"></td>
                                            <td class="tx_confirmation" data-bind="text: confirmation"></td>
                                            <td class="tx_type" data-bind="text: type"></td>
                                            <td class="tx_datetime" data-bind="text: datetime"></td>
                                            <td class="tx_id" data-bind="text: id"></td>
                                            <td class="tx_from_address" data-bind="text: fromAddress"></td>
                                            <td class="tx_to_address" data-bind="text: toAddress"></td>
                                            <td class="tx_amount" data-bind="text: amount"></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div id="unconfirmed_txs_container">
                            <div class="txs">
                                <div class="txs_title" data-bind="text: unconfirmedTxsName"></div>
                                <table>
                                    <thead>
                                        <tr class="txs_header">
                                            <th data-bind="text: txsColumnValidity"></th>
                                            <th data-bind="text: txsColumnState"></th>
                                            <th data-bind="text: txsColumnConfirmation"></th>
                                            <th data-bind="text: txsColumnType"></th>
                                            <th data-bind="text: txsColumnDatetime"></th>
                                            <th data-bind="text: txsColumnId"></th>
                                            <th data-bind="text: txsColumnFromAddress"></th>
                                            <th data-bind="text: txsColumnToAddress"></th>
                                            <th data-bind="text: txsColumnAmount"></th>
                                        </tr>
                                    </thead>
                                    <tbody data-bind="foreach: unconfirmedTxs">
                                        <tr class="tx">
                                            <td class="tx_validity" data-bind="text: validity"></td>
                                            <td class="tx_state" data-bind="text: state"></td>
                                            <td class="tx_confirmation" data-bind="text: confirmation"></td>
                                            <td class="tx_type" data-bind="text: type"></td>
                                            <td class="tx_datetime" data-bind="text: datetime"></td>
                                            <td class="tx_id" data-bind="text: id"></td>
                                            <td class="tx_from_address" data-bind="text: fromAddress"></td>
                                            <td class="tx_to_address" data-bind="text: toAddress"></td>
                                            <td class="tx_amount" data-bind="text: amount"></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div id="confirmed_txs_container">
                            <div class="txs">
                                <div class="txs_title" data-bind="text: confirmedTxsName"></div>
                                <table>
                                    <thead>
                                        <tr class="txs_header">
                                            <th data-bind="text: txsColumnValidity"></th>
                                            <th data-bind="text: txsColumnState"></th>
                                            <th data-bind="text: txsColumnConfirmation"></th>
                                            <th data-bind="text: txsColumnType"></th>
                                            <th data-bind="text: txsColumnDatetime"></th>
                                            <th data-bind="text: txsColumnId"></th>
                                            <th data-bind="text: txsColumnFromAddress"></th>
                                            <th data-bind="text: txsColumnToAddress"></th>
                                            <th data-bind="text: txsColumnAmount"></th>
                                        </tr>
                                    </thead>
                                    <tbody data-bind="foreach: confirmedTxs">
                                        <tr class="tx">
                                            <td class="tx_validity" data-bind="text: validity"></td>
                                            <td class="tx_state" data-bind="text: state"></td>
                                            <td class="tx_confirmation" data-bind="text: confirmation"></td>
                                            <td class="tx_type" data-bind="text: type"></td>
                                            <td class="tx_datetime" data-bind="text: datetime"></td>
                                            <td class="tx_id" data-bind="text: id"></td>
                                            <td class="tx_from_address" data-bind="text: fromAddress"></td>
                                            <td class="tx_to_address" data-bind="text: toAddress"></td>
                                            <td class="tx_amount" data-bind="text: amount"></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div id="tab1_tabcontent3" class="tab1_tabcontent" data-bind="visible: activatedPart() == 2">
                        <div id="logs_container">
                            <div data-bind="foreach: logs">
                                <span data-bind="html: message, css: { log_item_notification: type == 'notification', log_item_error: type == 'error', log_item_warning: type == 'warning' }"></span>
                                <br />
                                <br />
                            </div>
                        </div>
                    </div>
                    <div id="tab1_tabcontent4" class="tab1_tabcontent" data-bind="visible: activatedPart() == 3">
                        <div id="chats_container">
                            <div style="float: left; width: 150px;">
                                <select style="width: 150px;" data-bind="options: pseudonymousAccountHolders, optionsText: 'name', optionsCaption: chatPahDescription, value: chatPah"></select>
                            </div>
                            <div style="float: right; width: 75px;">
                                <button style="width: 75px;" data-bind="text: chatSend, enable: chatPah() && chatMessage(), click: SendChat"></button>
                            </div>
                            <div>
                                <div>
                                    <input id="chatMessageInput" style="width: calc(80vw - 250px);" data-bind="textInput: chatMessage" />
                                </div>
                            </div>
                            <div style="clear: both;" data-bind="foreach: chats">
                                <span data-bind="text: name + '> ' + message"></span>
                                <br />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
